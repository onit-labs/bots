// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/message.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ConversationReference } from "./conversation_reference";
import { Ciphertext } from "./ciphertext";
import { PublicKeyBundle } from "./public_key";
// Message V1

/**
 * Message header is encoded separately as the bytes are also used
 * as associated data for authenticated encryption
 *
 * @generated from protobuf message xmtp.message_contents.MessageHeaderV1
 */
export interface MessageHeaderV1 {
    /**
     * @generated from protobuf field: xmtp.message_contents.PublicKeyBundle sender = 1;
     */
    sender?: PublicKeyBundle;
    /**
     * @generated from protobuf field: xmtp.message_contents.PublicKeyBundle recipient = 2;
     */
    recipient?: PublicKeyBundle;
    /**
     * @generated from protobuf field: uint64 timestamp = 3;
     */
    timestamp: bigint;
}
/**
 * Message is the top level protocol element
 *
 * @generated from protobuf message xmtp.message_contents.MessageV1
 */
export interface MessageV1 {
    /**
     * encapsulates encoded MessageHeaderV1
     *
     * @generated from protobuf field: bytes header_bytes = 1;
     */
    headerBytes: Uint8Array;
    /**
     * Ciphertext.payload MUST contain encrypted EncodedContent
     *
     * @generated from protobuf field: xmtp.message_contents.Ciphertext ciphertext = 2;
     */
    ciphertext?: Ciphertext;
}
// Message V2

/**
 * Message header carries information that is not encrypted, and is therefore
 * observable by the network. It is however authenticated as associated data
 * of the AEAD encryption used to protect the message,
 * thus providing tamper evidence.
 *
 * @generated from protobuf message xmtp.message_contents.MessageHeaderV2
 */
export interface MessageHeaderV2 {
    /**
     * sender specified message creation time
     *
     * @generated from protobuf field: uint64 created_ns = 1;
     */
    createdNs: bigint;
    /**
     * the topic the message belongs to
     *
     * @generated from protobuf field: string topic = 2;
     */
    topic: string;
}
/**
 * Message combines the encoded header with the encrypted payload.
 *
 * @generated from protobuf message xmtp.message_contents.MessageV2
 */
export interface MessageV2 {
    /**
     * encapsulates encoded MessageHeaderV2
     *
     * @generated from protobuf field: bytes header_bytes = 1;
     */
    headerBytes: Uint8Array;
    /**
     * Ciphertext.payload MUST contain encrypted SignedContent
     *
     * @generated from protobuf field: xmtp.message_contents.Ciphertext ciphertext = 2;
     */
    ciphertext?: Ciphertext;
    /**
     * HMAC of the message ciphertext, with the HMAC key derived from the topic
     * key
     *
     * @generated from protobuf field: optional bytes sender_hmac = 3;
     */
    senderHmac?: Uint8Array;
    /**
     * Flag indicating whether the message should be pushed from a notification
     * server
     *
     * @generated from protobuf field: optional bool should_push = 4;
     */
    shouldPush?: boolean;
}
/**
 * Versioned Message
 *
 * @generated from protobuf message xmtp.message_contents.Message
 */
export interface Message {
    /**
     * @generated from protobuf oneof: version
     */
    version: {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: xmtp.message_contents.MessageV1 v1 = 1;
         */
        v1: MessageV1;
    } | {
        oneofKind: "v2";
        /**
         * @generated from protobuf field: xmtp.message_contents.MessageV2 v2 = 2;
         */
        v2: MessageV2;
    } | {
        oneofKind: undefined;
    };
}
/**
 * DecodedMessage represents the decrypted message contents.
 * DecodedMessage instances are not stored on the network, but
 * may be serialized and stored by clients
 *
 * @generated from protobuf message xmtp.message_contents.DecodedMessage
 */
export interface DecodedMessage {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string message_version = 2;
     */
    messageVersion: string;
    /**
     * @generated from protobuf field: string sender_address = 3;
     */
    senderAddress: string;
    /**
     * @generated from protobuf field: optional string recipient_address = 4;
     */
    recipientAddress?: string;
    /**
     * @generated from protobuf field: uint64 sent_ns = 5;
     */
    sentNs: bigint;
    /**
     * @generated from protobuf field: string content_topic = 6;
     */
    contentTopic: string;
    /**
     * @generated from protobuf field: xmtp.message_contents.ConversationReference conversation = 7;
     */
    conversation?: ConversationReference;
    /**
     * @generated from protobuf field: bytes content_bytes = 8;
     */
    contentBytes: Uint8Array; // encapsulates EncodedContent
}
// @generated message type with reflection information, may provide speed optimized methods
class MessageHeaderV1$Type extends MessageType<MessageHeaderV1> {
    constructor() {
        super("xmtp.message_contents.MessageHeaderV1", [
            { no: 1, name: "sender", kind: "message", T: () => PublicKeyBundle },
            { no: 2, name: "recipient", kind: "message", T: () => PublicKeyBundle },
            { no: 3, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MessageHeaderV1>): MessageHeaderV1 {
        const message = { timestamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessageHeaderV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageHeaderV1): MessageHeaderV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.PublicKeyBundle sender */ 1:
                    message.sender = PublicKeyBundle.internalBinaryRead(reader, reader.uint32(), options, message.sender);
                    break;
                case /* xmtp.message_contents.PublicKeyBundle recipient */ 2:
                    message.recipient = PublicKeyBundle.internalBinaryRead(reader, reader.uint32(), options, message.recipient);
                    break;
                case /* uint64 timestamp */ 3:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageHeaderV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.PublicKeyBundle sender = 1; */
        if (message.sender)
            PublicKeyBundle.internalBinaryWrite(message.sender, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.PublicKeyBundle recipient = 2; */
        if (message.recipient)
            PublicKeyBundle.internalBinaryWrite(message.recipient, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 timestamp = 3; */
        if (message.timestamp !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.MessageHeaderV1
 */
export const MessageHeaderV1 = new MessageHeaderV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageV1$Type extends MessageType<MessageV1> {
    constructor() {
        super("xmtp.message_contents.MessageV1", [
            { no: 1, name: "header_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ciphertext", kind: "message", T: () => Ciphertext }
        ]);
    }
    create(value?: PartialMessage<MessageV1>): MessageV1 {
        const message = { headerBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessageV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageV1): MessageV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes header_bytes */ 1:
                    message.headerBytes = reader.bytes();
                    break;
                case /* xmtp.message_contents.Ciphertext ciphertext */ 2:
                    message.ciphertext = Ciphertext.internalBinaryRead(reader, reader.uint32(), options, message.ciphertext);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes header_bytes = 1; */
        if (message.headerBytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.headerBytes);
        /* xmtp.message_contents.Ciphertext ciphertext = 2; */
        if (message.ciphertext)
            Ciphertext.internalBinaryWrite(message.ciphertext, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.MessageV1
 */
export const MessageV1 = new MessageV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageHeaderV2$Type extends MessageType<MessageHeaderV2> {
    constructor() {
        super("xmtp.message_contents.MessageHeaderV2", [
            { no: 1, name: "created_ns", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessageHeaderV2>): MessageHeaderV2 {
        const message = { createdNs: 0n, topic: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessageHeaderV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageHeaderV2): MessageHeaderV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 created_ns */ 1:
                    message.createdNs = reader.uint64().toBigInt();
                    break;
                case /* string topic */ 2:
                    message.topic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageHeaderV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 created_ns = 1; */
        if (message.createdNs !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.createdNs);
        /* string topic = 2; */
        if (message.topic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.topic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.MessageHeaderV2
 */
export const MessageHeaderV2 = new MessageHeaderV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageV2$Type extends MessageType<MessageV2> {
    constructor() {
        super("xmtp.message_contents.MessageV2", [
            { no: 1, name: "header_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ciphertext", kind: "message", T: () => Ciphertext },
            { no: 3, name: "sender_hmac", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "should_push", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MessageV2>): MessageV2 {
        const message = { headerBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MessageV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageV2): MessageV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes header_bytes */ 1:
                    message.headerBytes = reader.bytes();
                    break;
                case /* xmtp.message_contents.Ciphertext ciphertext */ 2:
                    message.ciphertext = Ciphertext.internalBinaryRead(reader, reader.uint32(), options, message.ciphertext);
                    break;
                case /* optional bytes sender_hmac */ 3:
                    message.senderHmac = reader.bytes();
                    break;
                case /* optional bool should_push */ 4:
                    message.shouldPush = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes header_bytes = 1; */
        if (message.headerBytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.headerBytes);
        /* xmtp.message_contents.Ciphertext ciphertext = 2; */
        if (message.ciphertext)
            Ciphertext.internalBinaryWrite(message.ciphertext, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes sender_hmac = 3; */
        if (message.senderHmac !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.senderHmac);
        /* optional bool should_push = 4; */
        if (message.shouldPush !== undefined)
            writer.tag(4, WireType.Varint).bool(message.shouldPush);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.MessageV2
 */
export const MessageV2 = new MessageV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("xmtp.message_contents.Message", [
            { no: 1, name: "v1", kind: "message", oneof: "version", T: () => MessageV1 },
            { no: 2, name: "v2", kind: "message", oneof: "version", T: () => MessageV2 }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = { version: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.MessageV1 v1 */ 1:
                    message.version = {
                        oneofKind: "v1",
                        v1: MessageV1.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v1)
                    };
                    break;
                case /* xmtp.message_contents.MessageV2 v2 */ 2:
                    message.version = {
                        oneofKind: "v2",
                        v2: MessageV2.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v2)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.MessageV1 v1 = 1; */
        if (message.version.oneofKind === "v1")
            MessageV1.internalBinaryWrite(message.version.v1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.MessageV2 v2 = 2; */
        if (message.version.oneofKind === "v2")
            MessageV2.internalBinaryWrite(message.version.v2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecodedMessage$Type extends MessageType<DecodedMessage> {
    constructor() {
        super("xmtp.message_contents.DecodedMessage", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sender_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "recipient_address", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sent_ns", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "content_topic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "conversation", kind: "message", T: () => ConversationReference },
            { no: 8, name: "content_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DecodedMessage>): DecodedMessage {
        const message = { id: "", messageVersion: "", senderAddress: "", sentNs: 0n, contentTopic: "", contentBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DecodedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecodedMessage): DecodedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string message_version */ 2:
                    message.messageVersion = reader.string();
                    break;
                case /* string sender_address */ 3:
                    message.senderAddress = reader.string();
                    break;
                case /* optional string recipient_address */ 4:
                    message.recipientAddress = reader.string();
                    break;
                case /* uint64 sent_ns */ 5:
                    message.sentNs = reader.uint64().toBigInt();
                    break;
                case /* string content_topic */ 6:
                    message.contentTopic = reader.string();
                    break;
                case /* xmtp.message_contents.ConversationReference conversation */ 7:
                    message.conversation = ConversationReference.internalBinaryRead(reader, reader.uint32(), options, message.conversation);
                    break;
                case /* bytes content_bytes */ 8:
                    message.contentBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecodedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string message_version = 2; */
        if (message.messageVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageVersion);
        /* string sender_address = 3; */
        if (message.senderAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderAddress);
        /* optional string recipient_address = 4; */
        if (message.recipientAddress !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.recipientAddress);
        /* uint64 sent_ns = 5; */
        if (message.sentNs !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.sentNs);
        /* string content_topic = 6; */
        if (message.contentTopic !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.contentTopic);
        /* xmtp.message_contents.ConversationReference conversation = 7; */
        if (message.conversation)
            ConversationReference.internalBinaryWrite(message.conversation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bytes content_bytes = 8; */
        if (message.contentBytes.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.contentBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.DecodedMessage
 */
export const DecodedMessage = new DecodedMessage$Type();
