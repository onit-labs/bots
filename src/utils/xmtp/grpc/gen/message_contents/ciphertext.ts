// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/ciphertext.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Signature } from "./signature";
/**
 * Ciphertext represents encrypted payload.
 * It is definited as a union to support cryptographic algorithm agility.
 * The payload is accompanied by the cryptographic parameters
 * required by the chosen encryption scheme.
 *
 * @generated from protobuf message xmtp.message_contents.Ciphertext
 */
export interface Ciphertext {
    /**
     * @generated from protobuf oneof: union
     */
    union: {
        oneofKind: "aes256GcmHkdfSha256";
        /**
         * @generated from protobuf field: xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 1;
         */
        aes256GcmHkdfSha256: Ciphertext_Aes256gcmHkdfsha256;
    } | {
        oneofKind: undefined;
    };
}
// Supported Encryption Schemes

/**
 * Encryption: AES256-GCM
 * Key derivation function: HKDF-SHA256
 *
 * @generated from protobuf message xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256
 */
export interface Ciphertext_Aes256gcmHkdfsha256 {
    /**
     * @generated from protobuf field: bytes hkdf_salt = 1;
     */
    hkdfSalt: Uint8Array; // 32 bytes
    /**
     * @generated from protobuf field: bytes gcm_nonce = 2;
     */
    gcmNonce: Uint8Array; // 12 bytes
    /**
     * @generated from protobuf field: bytes payload = 3;
     */
    payload: Uint8Array; // encrypted payload
}
/**
 * SignedEciesCiphertext represents an ECIES encrypted payload and a signature
 *
 * @generated from protobuf message xmtp.message_contents.SignedEciesCiphertext
 */
export interface SignedEciesCiphertext {
    /**
     * serialized Ecies message
     *
     * @generated from protobuf field: bytes ecies_bytes = 1;
     */
    eciesBytes: Uint8Array;
    /**
     * signature of sha256(ecies_bytes) signed with the IdentityKey
     *
     * @generated from protobuf field: xmtp.message_contents.Signature signature = 2;
     */
    signature?: Signature;
}
/**
 * Ecies is ciphertext encrypted using ECIES with a MAC
 *
 * @generated from protobuf message xmtp.message_contents.SignedEciesCiphertext.Ecies
 */
export interface SignedEciesCiphertext_Ecies {
    /**
     * @generated from protobuf field: bytes ephemeral_public_key = 1;
     */
    ephemeralPublicKey: Uint8Array; // 65 bytes
    /**
     * @generated from protobuf field: bytes iv = 2;
     */
    iv: Uint8Array; // 16 bytes
    /**
     * @generated from protobuf field: bytes mac = 3;
     */
    mac: Uint8Array; // 32 bytes
    /**
     * @generated from protobuf field: bytes ciphertext = 4;
     */
    ciphertext: Uint8Array; // encrypted payload with block size of 16
}
// @generated message type with reflection information, may provide speed optimized methods
class Ciphertext$Type extends MessageType<Ciphertext> {
    constructor() {
        super("xmtp.message_contents.Ciphertext", [
            { no: 1, name: "aes256_gcm_hkdf_sha256", kind: "message", oneof: "union", T: () => Ciphertext_Aes256gcmHkdfsha256 }
        ]);
    }
    create(value?: PartialMessage<Ciphertext>): Ciphertext {
        const message = { union: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Ciphertext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ciphertext): Ciphertext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 */ 1:
                    message.union = {
                        oneofKind: "aes256GcmHkdfSha256",
                        aes256GcmHkdfSha256: Ciphertext_Aes256gcmHkdfsha256.internalBinaryRead(reader, reader.uint32(), options, (message.union as any).aes256GcmHkdfSha256)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ciphertext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256 aes256_gcm_hkdf_sha256 = 1; */
        if (message.union.oneofKind === "aes256GcmHkdfSha256")
            Ciphertext_Aes256gcmHkdfsha256.internalBinaryWrite(message.union.aes256GcmHkdfSha256, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Ciphertext
 */
export const Ciphertext = new Ciphertext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ciphertext_Aes256gcmHkdfsha256$Type extends MessageType<Ciphertext_Aes256gcmHkdfsha256> {
    constructor() {
        super("xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256", [
            { no: 1, name: "hkdf_salt", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "gcm_nonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Ciphertext_Aes256gcmHkdfsha256>): Ciphertext_Aes256gcmHkdfsha256 {
        const message = { hkdfSalt: new Uint8Array(0), gcmNonce: new Uint8Array(0), payload: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Ciphertext_Aes256gcmHkdfsha256>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ciphertext_Aes256gcmHkdfsha256): Ciphertext_Aes256gcmHkdfsha256 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes hkdf_salt */ 1:
                    message.hkdfSalt = reader.bytes();
                    break;
                case /* bytes gcm_nonce */ 2:
                    message.gcmNonce = reader.bytes();
                    break;
                case /* bytes payload */ 3:
                    message.payload = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ciphertext_Aes256gcmHkdfsha256, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes hkdf_salt = 1; */
        if (message.hkdfSalt.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.hkdfSalt);
        /* bytes gcm_nonce = 2; */
        if (message.gcmNonce.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.gcmNonce);
        /* bytes payload = 3; */
        if (message.payload.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Ciphertext.Aes256gcmHkdfsha256
 */
export const Ciphertext_Aes256gcmHkdfsha256 = new Ciphertext_Aes256gcmHkdfsha256$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedEciesCiphertext$Type extends MessageType<SignedEciesCiphertext> {
    constructor() {
        super("xmtp.message_contents.SignedEciesCiphertext", [
            { no: 1, name: "ecies_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<SignedEciesCiphertext>): SignedEciesCiphertext {
        const message = { eciesBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignedEciesCiphertext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedEciesCiphertext): SignedEciesCiphertext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ecies_bytes */ 1:
                    message.eciesBytes = reader.bytes();
                    break;
                case /* xmtp.message_contents.Signature signature */ 2:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedEciesCiphertext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ecies_bytes = 1; */
        if (message.eciesBytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.eciesBytes);
        /* xmtp.message_contents.Signature signature = 2; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.SignedEciesCiphertext
 */
export const SignedEciesCiphertext = new SignedEciesCiphertext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedEciesCiphertext_Ecies$Type extends MessageType<SignedEciesCiphertext_Ecies> {
    constructor() {
        super("xmtp.message_contents.SignedEciesCiphertext.Ecies", [
            { no: 1, name: "ephemeral_public_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "iv", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "mac", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "ciphertext", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SignedEciesCiphertext_Ecies>): SignedEciesCiphertext_Ecies {
        const message = { ephemeralPublicKey: new Uint8Array(0), iv: new Uint8Array(0), mac: new Uint8Array(0), ciphertext: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignedEciesCiphertext_Ecies>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedEciesCiphertext_Ecies): SignedEciesCiphertext_Ecies {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes ephemeral_public_key */ 1:
                    message.ephemeralPublicKey = reader.bytes();
                    break;
                case /* bytes iv */ 2:
                    message.iv = reader.bytes();
                    break;
                case /* bytes mac */ 3:
                    message.mac = reader.bytes();
                    break;
                case /* bytes ciphertext */ 4:
                    message.ciphertext = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedEciesCiphertext_Ecies, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes ephemeral_public_key = 1; */
        if (message.ephemeralPublicKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.ephemeralPublicKey);
        /* bytes iv = 2; */
        if (message.iv.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.iv);
        /* bytes mac = 3; */
        if (message.mac.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.mac);
        /* bytes ciphertext = 4; */
        if (message.ciphertext.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.ciphertext);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.SignedEciesCiphertext.Ecies
 */
export const SignedEciesCiphertext_Ecies = new SignedEciesCiphertext_Ecies$Type();
