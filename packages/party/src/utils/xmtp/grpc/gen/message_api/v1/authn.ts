// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_api/v1/authn.proto" (package "xmtp.message_api.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Signature } from "../../message_contents/signature";
import { PublicKey } from "../../message_contents/public_key";
/**
 * Token is used by clients to prove to the nodes
 * that they are serving a specific wallet.
 *
 * @generated from protobuf message xmtp.message_api.v1.Token
 */
export interface Token {
    /**
     * identity key signed by a wallet
     *
     * @generated from protobuf field: xmtp.message_contents.PublicKey identity_key = 1;
     */
    identityKey?: PublicKey;
    /**
     * encoded bytes of AuthData
     *
     * @generated from protobuf field: bytes auth_data_bytes = 2;
     */
    authDataBytes: Uint8Array;
    /**
     * identity key signature of AuthData bytes
     *
     * @generated from protobuf field: xmtp.message_contents.Signature auth_data_signature = 3;
     */
    authDataSignature?: Signature;
}
/**
 * AuthData carries token parameters that are authenticated
 * by the identity key signature.
 * It is embedded in the Token structure as bytes
 * so that the bytes don't need to be reconstructed
 * to verify the token signature.
 *
 * @generated from protobuf message xmtp.message_api.v1.AuthData
 */
export interface AuthData {
    /**
     * address of the wallet
     *
     * @generated from protobuf field: string wallet_addr = 1;
     */
    walletAddr: string;
    /**
     * time when the token was generated/signed
     *
     * @generated from protobuf field: uint64 created_ns = 2;
     */
    createdNs: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Token$Type extends MessageType<Token> {
    constructor() {
        super("xmtp.message_api.v1.Token", [
            { no: 1, name: "identity_key", kind: "message", T: () => PublicKey },
            { no: 2, name: "auth_data_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "auth_data_signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<Token>): Token {
        const message = { authDataBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Token>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Token): Token {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.PublicKey identity_key */ 1:
                    message.identityKey = PublicKey.internalBinaryRead(reader, reader.uint32(), options, message.identityKey);
                    break;
                case /* bytes auth_data_bytes */ 2:
                    message.authDataBytes = reader.bytes();
                    break;
                case /* xmtp.message_contents.Signature auth_data_signature */ 3:
                    message.authDataSignature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.authDataSignature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Token, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.PublicKey identity_key = 1; */
        if (message.identityKey)
            PublicKey.internalBinaryWrite(message.identityKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes auth_data_bytes = 2; */
        if (message.authDataBytes.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.authDataBytes);
        /* xmtp.message_contents.Signature auth_data_signature = 3; */
        if (message.authDataSignature)
            Signature.internalBinaryWrite(message.authDataSignature, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_api.v1.Token
 */
export const Token = new Token$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthData$Type extends MessageType<AuthData> {
    constructor() {
        super("xmtp.message_api.v1.AuthData", [
            { no: 1, name: "wallet_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_ns", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AuthData>): AuthData {
        const message = { walletAddr: "", createdNs: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthData): AuthData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string wallet_addr */ 1:
                    message.walletAddr = reader.string();
                    break;
                case /* uint64 created_ns */ 2:
                    message.createdNs = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string wallet_addr = 1; */
        if (message.walletAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.walletAddr);
        /* uint64 created_ns = 2; */
        if (message.createdNs !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.createdNs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_api.v1.AuthData
 */
export const AuthData = new AuthData$Type();
