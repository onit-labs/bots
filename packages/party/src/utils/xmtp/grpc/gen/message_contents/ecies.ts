// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/ecies.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * EciesMessage is a wrapper for ECIES encrypted payloads
 *
 * @generated from protobuf message xmtp.message_contents.EciesMessage
 */
export interface EciesMessage {
    /**
     * @generated from protobuf oneof: version
     */
    version: {
        oneofKind: "v1";
        /**
         * Expected to be an ECIES encrypted SignedPayload
         *
         * @generated from protobuf field: bytes v1 = 1;
         */
        v1: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class EciesMessage$Type extends MessageType<EciesMessage> {
    constructor() {
        super("xmtp.message_contents.EciesMessage", [
            { no: 1, name: "v1", kind: "scalar", oneof: "version", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<EciesMessage>): EciesMessage {
        const message = { version: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EciesMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EciesMessage): EciesMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes v1 */ 1:
                    message.version = {
                        oneofKind: "v1",
                        v1: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EciesMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes v1 = 1; */
        if (message.version.oneofKind === "v1")
            writer.tag(1, WireType.LengthDelimited).bytes(message.version.v1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.EciesMessage
 */
export const EciesMessage = new EciesMessage$Type();
