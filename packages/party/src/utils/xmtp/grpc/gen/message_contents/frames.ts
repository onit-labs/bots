// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/frames.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SignedPublicKeyBundle } from "./public_key";
import { Signature } from "./signature";
/**
 * The message that will be signed by the Client and returned inside the
 * `action_body` field of the FrameAction message
 *
 * @generated from protobuf message xmtp.message_contents.FrameActionBody
 */
export interface FrameActionBody {
    /**
     * The URL of the frame that was clicked
     * May be different from `post_url`
     *
     * @generated from protobuf field: string frame_url = 1;
     */
    frameUrl: string;
    /**
     * The 1-indexed button that was clicked
     *
     * @generated from protobuf field: int32 button_index = 2;
     */
    buttonIndex: number;
    /**
     * Timestamp of the click in milliseconds since the epoch
     *
     * @deprecated
     * @generated from protobuf field: uint64 timestamp = 3 [deprecated = true];
     */
    timestamp: bigint;
    /**
     * A unique identifier for the conversation, not tied to anything on the
     * network. Will not match the topic or conversation_id
     *
     * @generated from protobuf field: string opaque_conversation_identifier = 4;
     */
    opaqueConversationIdentifier: string;
    /**
     * Unix timestamp
     *
     * @generated from protobuf field: uint32 unix_timestamp = 5;
     */
    unixTimestamp: number;
    /**
     * Input text from a text input field
     *
     * @generated from protobuf field: string input_text = 6;
     */
    inputText: string;
    /**
     * A state serialized to a string (for example via JSON.stringify()). Maximum 4096 bytes.
     *
     * @generated from protobuf field: string state = 7;
     */
    state: string;
}
/**
 * The outer payload that will be sent as the `messageBytes` in the
 * `trusted_data` part of the Frames message
 *
 * @generated from protobuf message xmtp.message_contents.FrameAction
 */
export interface FrameAction {
    /**
     * @generated from protobuf field: xmtp.message_contents.Signature signature = 1;
     */
    signature?: Signature;
    /**
     * The SignedPublicKeyBundle of the signer, used to link the XMTP signature
     * with a blockchain account through a chain of signatures.
     *
     * @generated from protobuf field: xmtp.message_contents.SignedPublicKeyBundle signed_public_key_bundle = 2;
     */
    signedPublicKeyBundle?: SignedPublicKeyBundle;
    /**
     * Serialized FrameActionBody message, so that the signature verification can
     * happen on a byte-perfect representation of the message
     *
     * @generated from protobuf field: bytes action_body = 3;
     */
    actionBody: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class FrameActionBody$Type extends MessageType<FrameActionBody> {
    constructor() {
        super("xmtp.message_contents.FrameActionBody", [
            { no: 1, name: "frame_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "button_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "opaque_conversation_identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "unix_timestamp", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "input_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FrameActionBody>): FrameActionBody {
        const message = { frameUrl: "", buttonIndex: 0, timestamp: 0n, opaqueConversationIdentifier: "", unixTimestamp: 0, inputText: "", state: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FrameActionBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrameActionBody): FrameActionBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string frame_url */ 1:
                    message.frameUrl = reader.string();
                    break;
                case /* int32 button_index */ 2:
                    message.buttonIndex = reader.int32();
                    break;
                case /* uint64 timestamp = 3 [deprecated = true];*/ 3:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* string opaque_conversation_identifier */ 4:
                    message.opaqueConversationIdentifier = reader.string();
                    break;
                case /* uint32 unix_timestamp */ 5:
                    message.unixTimestamp = reader.uint32();
                    break;
                case /* string input_text */ 6:
                    message.inputText = reader.string();
                    break;
                case /* string state */ 7:
                    message.state = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FrameActionBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string frame_url = 1; */
        if (message.frameUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.frameUrl);
        /* int32 button_index = 2; */
        if (message.buttonIndex !== 0)
            writer.tag(2, WireType.Varint).int32(message.buttonIndex);
        /* uint64 timestamp = 3 [deprecated = true]; */
        if (message.timestamp !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.timestamp);
        /* string opaque_conversation_identifier = 4; */
        if (message.opaqueConversationIdentifier !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.opaqueConversationIdentifier);
        /* uint32 unix_timestamp = 5; */
        if (message.unixTimestamp !== 0)
            writer.tag(5, WireType.Varint).uint32(message.unixTimestamp);
        /* string input_text = 6; */
        if (message.inputText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.inputText);
        /* string state = 7; */
        if (message.state !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.FrameActionBody
 */
export const FrameActionBody = new FrameActionBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FrameAction$Type extends MessageType<FrameAction> {
    constructor() {
        super("xmtp.message_contents.FrameAction", [
            { no: 1, name: "signature", kind: "message", T: () => Signature },
            { no: 2, name: "signed_public_key_bundle", kind: "message", T: () => SignedPublicKeyBundle },
            { no: 3, name: "action_body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<FrameAction>): FrameAction {
        const message = { actionBody: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FrameAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrameAction): FrameAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.Signature signature */ 1:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                case /* xmtp.message_contents.SignedPublicKeyBundle signed_public_key_bundle */ 2:
                    message.signedPublicKeyBundle = SignedPublicKeyBundle.internalBinaryRead(reader, reader.uint32(), options, message.signedPublicKeyBundle);
                    break;
                case /* bytes action_body */ 3:
                    message.actionBody = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FrameAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.Signature signature = 1; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.SignedPublicKeyBundle signed_public_key_bundle = 2; */
        if (message.signedPublicKeyBundle)
            SignedPublicKeyBundle.internalBinaryWrite(message.signedPublicKeyBundle, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes action_body = 3; */
        if (message.actionBody.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.actionBody);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.FrameAction
 */
export const FrameAction = new FrameAction$Type();
