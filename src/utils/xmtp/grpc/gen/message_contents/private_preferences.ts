// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/private_preferences.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Ciphertext } from "./ciphertext";
/**
 * PrivatePreferencesAction is a message used to update the client's preference
 * store.
 *
 * @generated from protobuf message xmtp.message_contents.PrivatePreferencesAction
 */
export interface PrivatePreferencesAction {
    /**
     * @generated from protobuf oneof: message_type
     */
    messageType: {
        oneofKind: "allowAddress";
        /**
         * @generated from protobuf field: xmtp.message_contents.PrivatePreferencesAction.AllowAddress allow_address = 1;
         */
        allowAddress: PrivatePreferencesAction_AllowAddress;
    } | {
        oneofKind: "denyAddress";
        /**
         * @generated from protobuf field: xmtp.message_contents.PrivatePreferencesAction.DenyAddress deny_address = 2;
         */
        denyAddress: PrivatePreferencesAction_DenyAddress;
    } | {
        oneofKind: "allowGroup";
        /**
         * @generated from protobuf field: xmtp.message_contents.PrivatePreferencesAction.AllowGroup allow_group = 3;
         */
        allowGroup: PrivatePreferencesAction_AllowGroup;
    } | {
        oneofKind: "denyGroup";
        /**
         * @generated from protobuf field: xmtp.message_contents.PrivatePreferencesAction.DenyGroup deny_group = 4;
         */
        denyGroup: PrivatePreferencesAction_DenyGroup;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Allow 1:1 direct message (DM) access
 *
 * @generated from protobuf message xmtp.message_contents.PrivatePreferencesAction.AllowAddress
 */
export interface PrivatePreferencesAction_AllowAddress {
    /**
     * Add the given wallet addresses to the allow list
     *
     * @generated from protobuf field: repeated string wallet_addresses = 1;
     */
    walletAddresses: string[];
}
/**
 * Deny (block) 1:1 direct message (DM) access
 *
 * @generated from protobuf message xmtp.message_contents.PrivatePreferencesAction.DenyAddress
 */
export interface PrivatePreferencesAction_DenyAddress {
    /**
     * Add the given wallet addresses to the deny list
     *
     * @generated from protobuf field: repeated string wallet_addresses = 1;
     */
    walletAddresses: string[];
}
/**
 * Allow Group access
 *
 * @generated from protobuf message xmtp.message_contents.PrivatePreferencesAction.AllowGroup
 */
export interface PrivatePreferencesAction_AllowGroup {
    /**
     * Add the given group_ids to the allow list
     *
     * @generated from protobuf field: repeated bytes group_ids = 1;
     */
    groupIds: Uint8Array[];
}
/**
 * Deny (deny) Group access
 *
 * @generated from protobuf message xmtp.message_contents.PrivatePreferencesAction.DenyGroup
 */
export interface PrivatePreferencesAction_DenyGroup {
    /**
     * Add the given group_ids to the deny list
     *
     * @generated from protobuf field: repeated bytes group_ids = 1;
     */
    groupIds: Uint8Array[];
}
/**
 * The payload that goes over the wire
 *
 * @generated from protobuf message xmtp.message_contents.PrivatePreferencesPayload
 */
export interface PrivatePreferencesPayload {
    /**
     * @generated from protobuf oneof: version
     */
    version: {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: xmtp.message_contents.Ciphertext v1 = 1;
         */
        v1: Ciphertext;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class PrivatePreferencesAction$Type extends MessageType<PrivatePreferencesAction> {
    constructor() {
        super("xmtp.message_contents.PrivatePreferencesAction", [
            { no: 1, name: "allow_address", kind: "message", oneof: "messageType", T: () => PrivatePreferencesAction_AllowAddress },
            { no: 2, name: "deny_address", kind: "message", oneof: "messageType", T: () => PrivatePreferencesAction_DenyAddress },
            { no: 3, name: "allow_group", kind: "message", oneof: "messageType", T: () => PrivatePreferencesAction_AllowGroup },
            { no: 4, name: "deny_group", kind: "message", oneof: "messageType", T: () => PrivatePreferencesAction_DenyGroup }
        ]);
    }
    create(value?: PartialMessage<PrivatePreferencesAction>): PrivatePreferencesAction {
        const message = { messageType: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivatePreferencesAction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivatePreferencesAction): PrivatePreferencesAction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.PrivatePreferencesAction.AllowAddress allow_address */ 1:
                    message.messageType = {
                        oneofKind: "allowAddress",
                        allowAddress: PrivatePreferencesAction_AllowAddress.internalBinaryRead(reader, reader.uint32(), options, (message.messageType as any).allowAddress)
                    };
                    break;
                case /* xmtp.message_contents.PrivatePreferencesAction.DenyAddress deny_address */ 2:
                    message.messageType = {
                        oneofKind: "denyAddress",
                        denyAddress: PrivatePreferencesAction_DenyAddress.internalBinaryRead(reader, reader.uint32(), options, (message.messageType as any).denyAddress)
                    };
                    break;
                case /* xmtp.message_contents.PrivatePreferencesAction.AllowGroup allow_group */ 3:
                    message.messageType = {
                        oneofKind: "allowGroup",
                        allowGroup: PrivatePreferencesAction_AllowGroup.internalBinaryRead(reader, reader.uint32(), options, (message.messageType as any).allowGroup)
                    };
                    break;
                case /* xmtp.message_contents.PrivatePreferencesAction.DenyGroup deny_group */ 4:
                    message.messageType = {
                        oneofKind: "denyGroup",
                        denyGroup: PrivatePreferencesAction_DenyGroup.internalBinaryRead(reader, reader.uint32(), options, (message.messageType as any).denyGroup)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivatePreferencesAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.PrivatePreferencesAction.AllowAddress allow_address = 1; */
        if (message.messageType.oneofKind === "allowAddress")
            PrivatePreferencesAction_AllowAddress.internalBinaryWrite(message.messageType.allowAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.PrivatePreferencesAction.DenyAddress deny_address = 2; */
        if (message.messageType.oneofKind === "denyAddress")
            PrivatePreferencesAction_DenyAddress.internalBinaryWrite(message.messageType.denyAddress, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.PrivatePreferencesAction.AllowGroup allow_group = 3; */
        if (message.messageType.oneofKind === "allowGroup")
            PrivatePreferencesAction_AllowGroup.internalBinaryWrite(message.messageType.allowGroup, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.PrivatePreferencesAction.DenyGroup deny_group = 4; */
        if (message.messageType.oneofKind === "denyGroup")
            PrivatePreferencesAction_DenyGroup.internalBinaryWrite(message.messageType.denyGroup, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivatePreferencesAction
 */
export const PrivatePreferencesAction = new PrivatePreferencesAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivatePreferencesAction_AllowAddress$Type extends MessageType<PrivatePreferencesAction_AllowAddress> {
    constructor() {
        super("xmtp.message_contents.PrivatePreferencesAction.AllowAddress", [
            { no: 1, name: "wallet_addresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrivatePreferencesAction_AllowAddress>): PrivatePreferencesAction_AllowAddress {
        const message = { walletAddresses: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivatePreferencesAction_AllowAddress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivatePreferencesAction_AllowAddress): PrivatePreferencesAction_AllowAddress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string wallet_addresses */ 1:
                    message.walletAddresses.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivatePreferencesAction_AllowAddress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string wallet_addresses = 1; */
        for (let i = 0; i < message.walletAddresses.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.walletAddresses[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivatePreferencesAction.AllowAddress
 */
export const PrivatePreferencesAction_AllowAddress = new PrivatePreferencesAction_AllowAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivatePreferencesAction_DenyAddress$Type extends MessageType<PrivatePreferencesAction_DenyAddress> {
    constructor() {
        super("xmtp.message_contents.PrivatePreferencesAction.DenyAddress", [
            { no: 1, name: "wallet_addresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrivatePreferencesAction_DenyAddress>): PrivatePreferencesAction_DenyAddress {
        const message = { walletAddresses: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivatePreferencesAction_DenyAddress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivatePreferencesAction_DenyAddress): PrivatePreferencesAction_DenyAddress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string wallet_addresses */ 1:
                    message.walletAddresses.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivatePreferencesAction_DenyAddress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string wallet_addresses = 1; */
        for (let i = 0; i < message.walletAddresses.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.walletAddresses[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivatePreferencesAction.DenyAddress
 */
export const PrivatePreferencesAction_DenyAddress = new PrivatePreferencesAction_DenyAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivatePreferencesAction_AllowGroup$Type extends MessageType<PrivatePreferencesAction_AllowGroup> {
    constructor() {
        super("xmtp.message_contents.PrivatePreferencesAction.AllowGroup", [
            { no: 1, name: "group_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PrivatePreferencesAction_AllowGroup>): PrivatePreferencesAction_AllowGroup {
        const message = { groupIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivatePreferencesAction_AllowGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivatePreferencesAction_AllowGroup): PrivatePreferencesAction_AllowGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes group_ids */ 1:
                    message.groupIds.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivatePreferencesAction_AllowGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes group_ids = 1; */
        for (let i = 0; i < message.groupIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.groupIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivatePreferencesAction.AllowGroup
 */
export const PrivatePreferencesAction_AllowGroup = new PrivatePreferencesAction_AllowGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivatePreferencesAction_DenyGroup$Type extends MessageType<PrivatePreferencesAction_DenyGroup> {
    constructor() {
        super("xmtp.message_contents.PrivatePreferencesAction.DenyGroup", [
            { no: 1, name: "group_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PrivatePreferencesAction_DenyGroup>): PrivatePreferencesAction_DenyGroup {
        const message = { groupIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivatePreferencesAction_DenyGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivatePreferencesAction_DenyGroup): PrivatePreferencesAction_DenyGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes group_ids */ 1:
                    message.groupIds.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivatePreferencesAction_DenyGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes group_ids = 1; */
        for (let i = 0; i < message.groupIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.groupIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivatePreferencesAction.DenyGroup
 */
export const PrivatePreferencesAction_DenyGroup = new PrivatePreferencesAction_DenyGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivatePreferencesPayload$Type extends MessageType<PrivatePreferencesPayload> {
    constructor() {
        super("xmtp.message_contents.PrivatePreferencesPayload", [
            { no: 1, name: "v1", kind: "message", oneof: "version", T: () => Ciphertext }
        ]);
    }
    create(value?: PartialMessage<PrivatePreferencesPayload>): PrivatePreferencesPayload {
        const message = { version: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivatePreferencesPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivatePreferencesPayload): PrivatePreferencesPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.Ciphertext v1 */ 1:
                    message.version = {
                        oneofKind: "v1",
                        v1: Ciphertext.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v1)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivatePreferencesPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.Ciphertext v1 = 1; */
        if (message.version.oneofKind === "v1")
            Ciphertext.internalBinaryWrite(message.version.v1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivatePreferencesPayload
 */
export const PrivatePreferencesPayload = new PrivatePreferencesPayload$Type();
