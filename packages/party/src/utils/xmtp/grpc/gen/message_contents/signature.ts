// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/signature.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Signature represents a generalized public key signature,
 * defined as a union to support cryptographic algorithm agility.
 *
 * @generated from protobuf message xmtp.message_contents.Signature
 */
export interface Signature {
    /**
     * @generated from protobuf oneof: union
     */
    union: {
        oneofKind: "ecdsaCompact";
        /**
         * @generated from protobuf field: xmtp.message_contents.Signature.ECDSACompact ecdsa_compact = 1;
         */
        ecdsaCompact: Signature_ECDSACompact;
    } | {
        oneofKind: "walletEcdsaCompact";
        /**
         * @generated from protobuf field: xmtp.message_contents.Signature.WalletECDSACompact wallet_ecdsa_compact = 2;
         */
        walletEcdsaCompact: Signature_WalletECDSACompact;
    } | {
        oneofKind: undefined;
    };
}
/**
 * ECDSA signature bytes and the recovery bit
 *
 * @generated from protobuf message xmtp.message_contents.Signature.ECDSACompact
 */
export interface Signature_ECDSACompact {
    /**
     * @generated from protobuf field: bytes bytes = 1;
     */
    bytes: Uint8Array; // compact representation [ R || S ], 64 bytes
    /**
     * @generated from protobuf field: uint32 recovery = 2;
     */
    recovery: number; // recovery bit
}
/**
 * ECDSA signature bytes and the recovery bit
 * produced by xmtp-js::PublicKey.signWithWallet function, i.e.
 * EIP-191 signature of a "Create Identity" message with the key embedded.
 * Used to sign identity keys.
 *
 * @generated from protobuf message xmtp.message_contents.Signature.WalletECDSACompact
 */
export interface Signature_WalletECDSACompact {
    /**
     * @generated from protobuf field: bytes bytes = 1;
     */
    bytes: Uint8Array; // compact representation [ R || S ], 64 bytes
    /**
     * @generated from protobuf field: uint32 recovery = 2;
     */
    recovery: number; // recovery bit
}
// @generated message type with reflection information, may provide speed optimized methods
class Signature$Type extends MessageType<Signature> {
    constructor() {
        super("xmtp.message_contents.Signature", [
            { no: 1, name: "ecdsa_compact", kind: "message", oneof: "union", T: () => Signature_ECDSACompact },
            { no: 2, name: "wallet_ecdsa_compact", kind: "message", oneof: "union", T: () => Signature_WalletECDSACompact }
        ]);
    }
    create(value?: PartialMessage<Signature>): Signature {
        const message = { union: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Signature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature): Signature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.Signature.ECDSACompact ecdsa_compact */ 1:
                    message.union = {
                        oneofKind: "ecdsaCompact",
                        ecdsaCompact: Signature_ECDSACompact.internalBinaryRead(reader, reader.uint32(), options, (message.union as any).ecdsaCompact)
                    };
                    break;
                case /* xmtp.message_contents.Signature.WalletECDSACompact wallet_ecdsa_compact */ 2:
                    message.union = {
                        oneofKind: "walletEcdsaCompact",
                        walletEcdsaCompact: Signature_WalletECDSACompact.internalBinaryRead(reader, reader.uint32(), options, (message.union as any).walletEcdsaCompact)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.Signature.ECDSACompact ecdsa_compact = 1; */
        if (message.union.oneofKind === "ecdsaCompact")
            Signature_ECDSACompact.internalBinaryWrite(message.union.ecdsaCompact, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.Signature.WalletECDSACompact wallet_ecdsa_compact = 2; */
        if (message.union.oneofKind === "walletEcdsaCompact")
            Signature_WalletECDSACompact.internalBinaryWrite(message.union.walletEcdsaCompact, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Signature
 */
export const Signature = new Signature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Signature_ECDSACompact$Type extends MessageType<Signature_ECDSACompact> {
    constructor() {
        super("xmtp.message_contents.Signature.ECDSACompact", [
            { no: 1, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "recovery", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Signature_ECDSACompact>): Signature_ECDSACompact {
        const message = { bytes: new Uint8Array(0), recovery: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Signature_ECDSACompact>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature_ECDSACompact): Signature_ECDSACompact {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes bytes */ 1:
                    message.bytes = reader.bytes();
                    break;
                case /* uint32 recovery */ 2:
                    message.recovery = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signature_ECDSACompact, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes bytes = 1; */
        if (message.bytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.bytes);
        /* uint32 recovery = 2; */
        if (message.recovery !== 0)
            writer.tag(2, WireType.Varint).uint32(message.recovery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Signature.ECDSACompact
 */
export const Signature_ECDSACompact = new Signature_ECDSACompact$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Signature_WalletECDSACompact$Type extends MessageType<Signature_WalletECDSACompact> {
    constructor() {
        super("xmtp.message_contents.Signature.WalletECDSACompact", [
            { no: 1, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "recovery", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Signature_WalletECDSACompact>): Signature_WalletECDSACompact {
        const message = { bytes: new Uint8Array(0), recovery: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Signature_WalletECDSACompact>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature_WalletECDSACompact): Signature_WalletECDSACompact {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes bytes */ 1:
                    message.bytes = reader.bytes();
                    break;
                case /* uint32 recovery */ 2:
                    message.recovery = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signature_WalletECDSACompact, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes bytes = 1; */
        if (message.bytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.bytes);
        /* uint32 recovery = 2; */
        if (message.recovery !== 0)
            writer.tag(2, WireType.Varint).uint32(message.recovery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Signature.WalletECDSACompact
 */
export const Signature_WalletECDSACompact = new Signature_WalletECDSACompact$Type();
