// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/private_key.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Ciphertext } from "./ciphertext";
import { PublicKey } from "./public_key";
import { SignedPublicKey } from "./public_key";
/**
 * PrivateKey generalized to support different key types
 *
 * @generated from protobuf message xmtp.message_contents.SignedPrivateKey
 */
export interface SignedPrivateKey {
    /**
     * time the key was created
     *
     * @generated from protobuf field: uint64 created_ns = 1;
     */
    createdNs: bigint;
    /**
     * @generated from protobuf oneof: union
     */
    union: {
        oneofKind: "secp256K1";
        /**
         * @generated from protobuf field: xmtp.message_contents.SignedPrivateKey.Secp256k1 secp256k1 = 2 [json_name = "secp256k1"];
         */
        secp256K1: SignedPrivateKey_Secp256k1;
    } | {
        oneofKind: undefined;
    };
    /**
     * public key for this private key
     *
     * @generated from protobuf field: xmtp.message_contents.SignedPublicKey public_key = 3;
     */
    publicKey?: SignedPublicKey;
}
// Supported key types

/**
 * EC: SECP256k1
 *
 * @generated from protobuf message xmtp.message_contents.SignedPrivateKey.Secp256k1
 */
export interface SignedPrivateKey_Secp256k1 {
    /**
     * @generated from protobuf field: bytes bytes = 1;
     */
    bytes: Uint8Array; // D big-endian, 32 bytes
}
/**
 * PrivateKeyBundle wraps the identityKey and the preKeys,
 * enforces usage of signed keys.
 *
 * @generated from protobuf message xmtp.message_contents.PrivateKeyBundleV2
 */
export interface PrivateKeyBundleV2 {
    /**
     * @generated from protobuf field: xmtp.message_contents.SignedPrivateKey identity_key = 1;
     */
    identityKey?: SignedPrivateKey;
    /**
     * all the known pre-keys, newer keys first,
     *
     * @generated from protobuf field: repeated xmtp.message_contents.SignedPrivateKey pre_keys = 2;
     */
    preKeys: SignedPrivateKey[];
}
/**
 * LEGACY: PrivateKey generalized to support different key types
 *
 * @generated from protobuf message xmtp.message_contents.PrivateKey
 */
export interface PrivateKey {
    /**
     * time the key was created
     *
     * @generated from protobuf field: uint64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf oneof: union
     */
    union: {
        oneofKind: "secp256K1";
        /**
         * @generated from protobuf field: xmtp.message_contents.PrivateKey.Secp256k1 secp256k1 = 2 [json_name = "secp256k1"];
         */
        secp256K1: PrivateKey_Secp256k1;
    } | {
        oneofKind: undefined;
    };
    /**
     * public key for this private key
     *
     * @generated from protobuf field: xmtp.message_contents.PublicKey public_key = 3;
     */
    publicKey?: PublicKey;
}
// Supported key types

/**
 * EC: SECP256k1
 *
 * @generated from protobuf message xmtp.message_contents.PrivateKey.Secp256k1
 */
export interface PrivateKey_Secp256k1 {
    /**
     * @generated from protobuf field: bytes bytes = 1;
     */
    bytes: Uint8Array; // D big-endian, 32 bytes
}
/**
 * LEGACY: PrivateKeyBundleV1 wraps the identityKey and the preKeys
 *
 * @generated from protobuf message xmtp.message_contents.PrivateKeyBundleV1
 */
export interface PrivateKeyBundleV1 {
    /**
     * @generated from protobuf field: xmtp.message_contents.PrivateKey identity_key = 1;
     */
    identityKey?: PrivateKey;
    /**
     * all the known pre-keys, newer keys first,
     *
     * @generated from protobuf field: repeated xmtp.message_contents.PrivateKey pre_keys = 2;
     */
    preKeys: PrivateKey[];
}
/**
 * Versioned PrivateKeyBundle
 *
 * @generated from protobuf message xmtp.message_contents.PrivateKeyBundle
 */
export interface PrivateKeyBundle {
    /**
     * @generated from protobuf oneof: version
     */
    version: {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: xmtp.message_contents.PrivateKeyBundleV1 v1 = 1;
         */
        v1: PrivateKeyBundleV1;
    } | {
        oneofKind: "v2";
        /**
         * @generated from protobuf field: xmtp.message_contents.PrivateKeyBundleV2 v2 = 2;
         */
        v2: PrivateKeyBundleV2;
    } | {
        oneofKind: undefined;
    };
}
/**
 * PrivateKeyBundle encrypted with key material generated by
 * signing a randomly generated "pre-key" with the user's wallet,
 * i.e. EIP-191 signature of a "storage signature" message with
 * the pre-key embedded in it.
 * (see xmtp-js::PrivateKeyBundle.toEncryptedBytes for details)
 *
 * @generated from protobuf message xmtp.message_contents.EncryptedPrivateKeyBundleV1
 */
export interface EncryptedPrivateKeyBundleV1 {
    /**
     * randomly generated pre-key
     *
     * @generated from protobuf field: bytes wallet_pre_key = 1;
     */
    walletPreKey: Uint8Array; // 32 bytes
    /**
     * MUST contain encrypted PrivateKeyBundle
     *
     * @generated from protobuf field: xmtp.message_contents.Ciphertext ciphertext = 2;
     */
    ciphertext?: Ciphertext;
}
/**
 * Versioned encrypted PrivateKeyBundle
 *
 * @generated from protobuf message xmtp.message_contents.EncryptedPrivateKeyBundle
 */
export interface EncryptedPrivateKeyBundle {
    /**
     * @generated from protobuf oneof: version
     */
    version: {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: xmtp.message_contents.EncryptedPrivateKeyBundleV1 v1 = 1;
         */
        v1: EncryptedPrivateKeyBundleV1;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class SignedPrivateKey$Type extends MessageType<SignedPrivateKey> {
    constructor() {
        super("xmtp.message_contents.SignedPrivateKey", [
            { no: 1, name: "created_ns", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "secp256k1", kind: "message", jsonName: "secp256k1", oneof: "union", T: () => SignedPrivateKey_Secp256k1 },
            { no: 3, name: "public_key", kind: "message", T: () => SignedPublicKey }
        ]);
    }
    create(value?: PartialMessage<SignedPrivateKey>): SignedPrivateKey {
        const message = { createdNs: 0n, union: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignedPrivateKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedPrivateKey): SignedPrivateKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 created_ns */ 1:
                    message.createdNs = reader.uint64().toBigInt();
                    break;
                case /* xmtp.message_contents.SignedPrivateKey.Secp256k1 secp256k1 = 2 [json_name = "secp256k1"];*/ 2:
                    message.union = {
                        oneofKind: "secp256K1",
                        secp256K1: SignedPrivateKey_Secp256k1.internalBinaryRead(reader, reader.uint32(), options, (message.union as any).secp256K1)
                    };
                    break;
                case /* xmtp.message_contents.SignedPublicKey public_key */ 3:
                    message.publicKey = SignedPublicKey.internalBinaryRead(reader, reader.uint32(), options, message.publicKey);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedPrivateKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 created_ns = 1; */
        if (message.createdNs !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.createdNs);
        /* xmtp.message_contents.SignedPrivateKey.Secp256k1 secp256k1 = 2 [json_name = "secp256k1"]; */
        if (message.union.oneofKind === "secp256K1")
            SignedPrivateKey_Secp256k1.internalBinaryWrite(message.union.secp256K1, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.SignedPublicKey public_key = 3; */
        if (message.publicKey)
            SignedPublicKey.internalBinaryWrite(message.publicKey, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.SignedPrivateKey
 */
export const SignedPrivateKey = new SignedPrivateKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedPrivateKey_Secp256k1$Type extends MessageType<SignedPrivateKey_Secp256k1> {
    constructor() {
        super("xmtp.message_contents.SignedPrivateKey.Secp256k1", [
            { no: 1, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SignedPrivateKey_Secp256k1>): SignedPrivateKey_Secp256k1 {
        const message = { bytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignedPrivateKey_Secp256k1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedPrivateKey_Secp256k1): SignedPrivateKey_Secp256k1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes bytes */ 1:
                    message.bytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedPrivateKey_Secp256k1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes bytes = 1; */
        if (message.bytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.SignedPrivateKey.Secp256k1
 */
export const SignedPrivateKey_Secp256k1 = new SignedPrivateKey_Secp256k1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivateKeyBundleV2$Type extends MessageType<PrivateKeyBundleV2> {
    constructor() {
        super("xmtp.message_contents.PrivateKeyBundleV2", [
            { no: 1, name: "identity_key", kind: "message", T: () => SignedPrivateKey },
            { no: 2, name: "pre_keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SignedPrivateKey }
        ]);
    }
    create(value?: PartialMessage<PrivateKeyBundleV2>): PrivateKeyBundleV2 {
        const message = { preKeys: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivateKeyBundleV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivateKeyBundleV2): PrivateKeyBundleV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.SignedPrivateKey identity_key */ 1:
                    message.identityKey = SignedPrivateKey.internalBinaryRead(reader, reader.uint32(), options, message.identityKey);
                    break;
                case /* repeated xmtp.message_contents.SignedPrivateKey pre_keys */ 2:
                    message.preKeys.push(SignedPrivateKey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivateKeyBundleV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.SignedPrivateKey identity_key = 1; */
        if (message.identityKey)
            SignedPrivateKey.internalBinaryWrite(message.identityKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated xmtp.message_contents.SignedPrivateKey pre_keys = 2; */
        for (let i = 0; i < message.preKeys.length; i++)
            SignedPrivateKey.internalBinaryWrite(message.preKeys[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivateKeyBundleV2
 */
export const PrivateKeyBundleV2 = new PrivateKeyBundleV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivateKey$Type extends MessageType<PrivateKey> {
    constructor() {
        super("xmtp.message_contents.PrivateKey", [
            { no: 1, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "secp256k1", kind: "message", jsonName: "secp256k1", oneof: "union", T: () => PrivateKey_Secp256k1 },
            { no: 3, name: "public_key", kind: "message", T: () => PublicKey }
        ]);
    }
    create(value?: PartialMessage<PrivateKey>): PrivateKey {
        const message = { timestamp: 0n, union: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivateKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivateKey): PrivateKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 timestamp */ 1:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* xmtp.message_contents.PrivateKey.Secp256k1 secp256k1 = 2 [json_name = "secp256k1"];*/ 2:
                    message.union = {
                        oneofKind: "secp256K1",
                        secp256K1: PrivateKey_Secp256k1.internalBinaryRead(reader, reader.uint32(), options, (message.union as any).secp256K1)
                    };
                    break;
                case /* xmtp.message_contents.PublicKey public_key */ 3:
                    message.publicKey = PublicKey.internalBinaryRead(reader, reader.uint32(), options, message.publicKey);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivateKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.timestamp);
        /* xmtp.message_contents.PrivateKey.Secp256k1 secp256k1 = 2 [json_name = "secp256k1"]; */
        if (message.union.oneofKind === "secp256K1")
            PrivateKey_Secp256k1.internalBinaryWrite(message.union.secp256K1, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.PublicKey public_key = 3; */
        if (message.publicKey)
            PublicKey.internalBinaryWrite(message.publicKey, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivateKey
 */
export const PrivateKey = new PrivateKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivateKey_Secp256k1$Type extends MessageType<PrivateKey_Secp256k1> {
    constructor() {
        super("xmtp.message_contents.PrivateKey.Secp256k1", [
            { no: 1, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PrivateKey_Secp256k1>): PrivateKey_Secp256k1 {
        const message = { bytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivateKey_Secp256k1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivateKey_Secp256k1): PrivateKey_Secp256k1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes bytes */ 1:
                    message.bytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivateKey_Secp256k1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes bytes = 1; */
        if (message.bytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivateKey.Secp256k1
 */
export const PrivateKey_Secp256k1 = new PrivateKey_Secp256k1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivateKeyBundleV1$Type extends MessageType<PrivateKeyBundleV1> {
    constructor() {
        super("xmtp.message_contents.PrivateKeyBundleV1", [
            { no: 1, name: "identity_key", kind: "message", T: () => PrivateKey },
            { no: 2, name: "pre_keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PrivateKey }
        ]);
    }
    create(value?: PartialMessage<PrivateKeyBundleV1>): PrivateKeyBundleV1 {
        const message = { preKeys: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivateKeyBundleV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivateKeyBundleV1): PrivateKeyBundleV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.PrivateKey identity_key */ 1:
                    message.identityKey = PrivateKey.internalBinaryRead(reader, reader.uint32(), options, message.identityKey);
                    break;
                case /* repeated xmtp.message_contents.PrivateKey pre_keys */ 2:
                    message.preKeys.push(PrivateKey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivateKeyBundleV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.PrivateKey identity_key = 1; */
        if (message.identityKey)
            PrivateKey.internalBinaryWrite(message.identityKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated xmtp.message_contents.PrivateKey pre_keys = 2; */
        for (let i = 0; i < message.preKeys.length; i++)
            PrivateKey.internalBinaryWrite(message.preKeys[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivateKeyBundleV1
 */
export const PrivateKeyBundleV1 = new PrivateKeyBundleV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivateKeyBundle$Type extends MessageType<PrivateKeyBundle> {
    constructor() {
        super("xmtp.message_contents.PrivateKeyBundle", [
            { no: 1, name: "v1", kind: "message", oneof: "version", T: () => PrivateKeyBundleV1 },
            { no: 2, name: "v2", kind: "message", oneof: "version", T: () => PrivateKeyBundleV2 }
        ]);
    }
    create(value?: PartialMessage<PrivateKeyBundle>): PrivateKeyBundle {
        const message = { version: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivateKeyBundle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivateKeyBundle): PrivateKeyBundle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.PrivateKeyBundleV1 v1 */ 1:
                    message.version = {
                        oneofKind: "v1",
                        v1: PrivateKeyBundleV1.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v1)
                    };
                    break;
                case /* xmtp.message_contents.PrivateKeyBundleV2 v2 */ 2:
                    message.version = {
                        oneofKind: "v2",
                        v2: PrivateKeyBundleV2.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v2)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivateKeyBundle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.PrivateKeyBundleV1 v1 = 1; */
        if (message.version.oneofKind === "v1")
            PrivateKeyBundleV1.internalBinaryWrite(message.version.v1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.PrivateKeyBundleV2 v2 = 2; */
        if (message.version.oneofKind === "v2")
            PrivateKeyBundleV2.internalBinaryWrite(message.version.v2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.PrivateKeyBundle
 */
export const PrivateKeyBundle = new PrivateKeyBundle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptedPrivateKeyBundleV1$Type extends MessageType<EncryptedPrivateKeyBundleV1> {
    constructor() {
        super("xmtp.message_contents.EncryptedPrivateKeyBundleV1", [
            { no: 1, name: "wallet_pre_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ciphertext", kind: "message", T: () => Ciphertext }
        ]);
    }
    create(value?: PartialMessage<EncryptedPrivateKeyBundleV1>): EncryptedPrivateKeyBundleV1 {
        const message = { walletPreKey: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EncryptedPrivateKeyBundleV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncryptedPrivateKeyBundleV1): EncryptedPrivateKeyBundleV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes wallet_pre_key */ 1:
                    message.walletPreKey = reader.bytes();
                    break;
                case /* xmtp.message_contents.Ciphertext ciphertext */ 2:
                    message.ciphertext = Ciphertext.internalBinaryRead(reader, reader.uint32(), options, message.ciphertext);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EncryptedPrivateKeyBundleV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes wallet_pre_key = 1; */
        if (message.walletPreKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.walletPreKey);
        /* xmtp.message_contents.Ciphertext ciphertext = 2; */
        if (message.ciphertext)
            Ciphertext.internalBinaryWrite(message.ciphertext, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.EncryptedPrivateKeyBundleV1
 */
export const EncryptedPrivateKeyBundleV1 = new EncryptedPrivateKeyBundleV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EncryptedPrivateKeyBundle$Type extends MessageType<EncryptedPrivateKeyBundle> {
    constructor() {
        super("xmtp.message_contents.EncryptedPrivateKeyBundle", [
            { no: 1, name: "v1", kind: "message", oneof: "version", T: () => EncryptedPrivateKeyBundleV1 }
        ]);
    }
    create(value?: PartialMessage<EncryptedPrivateKeyBundle>): EncryptedPrivateKeyBundle {
        const message = { version: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EncryptedPrivateKeyBundle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncryptedPrivateKeyBundle): EncryptedPrivateKeyBundle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.EncryptedPrivateKeyBundleV1 v1 */ 1:
                    message.version = {
                        oneofKind: "v1",
                        v1: EncryptedPrivateKeyBundleV1.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v1)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EncryptedPrivateKeyBundle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.EncryptedPrivateKeyBundleV1 v1 = 1; */
        if (message.version.oneofKind === "v1")
            EncryptedPrivateKeyBundleV1.internalBinaryWrite(message.version.v1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.EncryptedPrivateKeyBundle
 */
export const EncryptedPrivateKeyBundle = new EncryptedPrivateKeyBundle$Type();
