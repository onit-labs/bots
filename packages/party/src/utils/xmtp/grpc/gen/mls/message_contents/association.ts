// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "mls/message_contents/association.proto" (package "xmtp.mls.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SignedPublicKey } from "../../message_contents/public_key";
/**
 * Used for "Grant Messaging Access" associations
 *
 * @generated from protobuf message xmtp.mls.message_contents.GrantMessagingAccessAssociation
 */
export interface GrantMessagingAccessAssociation {
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.AssociationTextVersion association_text_version = 1;
     */
    associationTextVersion: AssociationTextVersion;
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.RecoverableEcdsaSignature signature = 2;
     */
    signature?: RecoverableEcdsaSignature; // EIP-191 signature
    /**
     * @generated from protobuf field: string account_address = 3;
     */
    accountAddress: string;
    /**
     * @generated from protobuf field: uint64 created_ns = 4;
     */
    createdNs: bigint;
}
/**
 * Used for "Revoke Messaging Access" associations
 *
 * @generated from protobuf message xmtp.mls.message_contents.RevokeMessagingAccessAssociation
 */
export interface RevokeMessagingAccessAssociation {
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.AssociationTextVersion association_text_version = 1;
     */
    associationTextVersion: AssociationTextVersion;
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.RecoverableEcdsaSignature signature = 2;
     */
    signature?: RecoverableEcdsaSignature; // EIP-191 signature
    /**
     * @generated from protobuf field: string account_address = 3;
     */
    accountAddress: string;
    /**
     * @generated from protobuf field: uint64 created_ns = 4;
     */
    createdNs: bigint;
}
/**
 * LegacyCreateIdentityAssociation is used when a v3 installation key
 * is signed by a v2 identity key, which in turn is signed via a
 * 'CreateIdentity' wallet signature
 *
 * @generated from protobuf message xmtp.mls.message_contents.LegacyCreateIdentityAssociation
 */
export interface LegacyCreateIdentityAssociation {
    /**
     * Signs SHA-256 hash of installation key
     *
     * @generated from protobuf field: xmtp.mls.message_contents.RecoverableEcdsaSignature signature = 1;
     */
    signature?: RecoverableEcdsaSignature;
    /**
     * created_ns is encoded inside serialized key, account_address is recoverable
     * from the SignedPublicKey signature
     *
     * @generated from protobuf field: xmtp.message_contents.SignedPublicKey signed_legacy_create_identity_key = 2;
     */
    signedLegacyCreateIdentityKey?: SignedPublicKey;
}
/**
 * RecoverableEcdsaSignature
 *
 * @generated from protobuf message xmtp.mls.message_contents.RecoverableEcdsaSignature
 */
export interface RecoverableEcdsaSignature {
    /**
     * 65-bytes [ R || S || V ], with recovery id as the last byte
     *
     * @generated from protobuf field: bytes bytes = 1;
     */
    bytes: Uint8Array;
}
/**
 * EdDSA signature bytes matching RFC 8032
 *
 * @generated from protobuf message xmtp.mls.message_contents.EdDsaSignature
 */
export interface EdDsaSignature {
    /**
     * @generated from protobuf field: bytes bytes = 1;
     */
    bytes: Uint8Array;
}
/**
 * Allows for us to update the format of the association text without
 * incrementing the entire proto
 *
 * @generated from protobuf enum xmtp.mls.message_contents.AssociationTextVersion
 */
export enum AssociationTextVersion {
    /**
     * @generated from protobuf enum value: ASSOCIATION_TEXT_VERSION_UNSPECIFIED = 0;
     */
    ASSOCIATION_TEXT_VERSION_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ASSOCIATION_TEXT_VERSION_1 = 1;
     */
    ASSOCIATION_TEXT_VERSION_1 = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class GrantMessagingAccessAssociation$Type extends MessageType<GrantMessagingAccessAssociation> {
    constructor() {
        super("xmtp.mls.message_contents.GrantMessagingAccessAssociation", [
            { no: 1, name: "association_text_version", kind: "enum", T: () => ["xmtp.mls.message_contents.AssociationTextVersion", AssociationTextVersion] },
            { no: 2, name: "signature", kind: "message", T: () => RecoverableEcdsaSignature },
            { no: 3, name: "account_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_ns", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GrantMessagingAccessAssociation>): GrantMessagingAccessAssociation {
        const message = { associationTextVersion: 0, accountAddress: "", createdNs: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrantMessagingAccessAssociation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantMessagingAccessAssociation): GrantMessagingAccessAssociation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.mls.message_contents.AssociationTextVersion association_text_version */ 1:
                    message.associationTextVersion = reader.int32();
                    break;
                case /* xmtp.mls.message_contents.RecoverableEcdsaSignature signature */ 2:
                    message.signature = RecoverableEcdsaSignature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                case /* string account_address */ 3:
                    message.accountAddress = reader.string();
                    break;
                case /* uint64 created_ns */ 4:
                    message.createdNs = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantMessagingAccessAssociation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.mls.message_contents.AssociationTextVersion association_text_version = 1; */
        if (message.associationTextVersion !== 0)
            writer.tag(1, WireType.Varint).int32(message.associationTextVersion);
        /* xmtp.mls.message_contents.RecoverableEcdsaSignature signature = 2; */
        if (message.signature)
            RecoverableEcdsaSignature.internalBinaryWrite(message.signature, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string account_address = 3; */
        if (message.accountAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.accountAddress);
        /* uint64 created_ns = 4; */
        if (message.createdNs !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.createdNs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.GrantMessagingAccessAssociation
 */
export const GrantMessagingAccessAssociation = new GrantMessagingAccessAssociation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeMessagingAccessAssociation$Type extends MessageType<RevokeMessagingAccessAssociation> {
    constructor() {
        super("xmtp.mls.message_contents.RevokeMessagingAccessAssociation", [
            { no: 1, name: "association_text_version", kind: "enum", T: () => ["xmtp.mls.message_contents.AssociationTextVersion", AssociationTextVersion] },
            { no: 2, name: "signature", kind: "message", T: () => RecoverableEcdsaSignature },
            { no: 3, name: "account_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_ns", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RevokeMessagingAccessAssociation>): RevokeMessagingAccessAssociation {
        const message = { associationTextVersion: 0, accountAddress: "", createdNs: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RevokeMessagingAccessAssociation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeMessagingAccessAssociation): RevokeMessagingAccessAssociation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.mls.message_contents.AssociationTextVersion association_text_version */ 1:
                    message.associationTextVersion = reader.int32();
                    break;
                case /* xmtp.mls.message_contents.RecoverableEcdsaSignature signature */ 2:
                    message.signature = RecoverableEcdsaSignature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                case /* string account_address */ 3:
                    message.accountAddress = reader.string();
                    break;
                case /* uint64 created_ns */ 4:
                    message.createdNs = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeMessagingAccessAssociation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.mls.message_contents.AssociationTextVersion association_text_version = 1; */
        if (message.associationTextVersion !== 0)
            writer.tag(1, WireType.Varint).int32(message.associationTextVersion);
        /* xmtp.mls.message_contents.RecoverableEcdsaSignature signature = 2; */
        if (message.signature)
            RecoverableEcdsaSignature.internalBinaryWrite(message.signature, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string account_address = 3; */
        if (message.accountAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.accountAddress);
        /* uint64 created_ns = 4; */
        if (message.createdNs !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.createdNs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.RevokeMessagingAccessAssociation
 */
export const RevokeMessagingAccessAssociation = new RevokeMessagingAccessAssociation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LegacyCreateIdentityAssociation$Type extends MessageType<LegacyCreateIdentityAssociation> {
    constructor() {
        super("xmtp.mls.message_contents.LegacyCreateIdentityAssociation", [
            { no: 1, name: "signature", kind: "message", T: () => RecoverableEcdsaSignature },
            { no: 2, name: "signed_legacy_create_identity_key", kind: "message", T: () => SignedPublicKey }
        ]);
    }
    create(value?: PartialMessage<LegacyCreateIdentityAssociation>): LegacyCreateIdentityAssociation {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LegacyCreateIdentityAssociation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LegacyCreateIdentityAssociation): LegacyCreateIdentityAssociation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.mls.message_contents.RecoverableEcdsaSignature signature */ 1:
                    message.signature = RecoverableEcdsaSignature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                case /* xmtp.message_contents.SignedPublicKey signed_legacy_create_identity_key */ 2:
                    message.signedLegacyCreateIdentityKey = SignedPublicKey.internalBinaryRead(reader, reader.uint32(), options, message.signedLegacyCreateIdentityKey);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LegacyCreateIdentityAssociation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.mls.message_contents.RecoverableEcdsaSignature signature = 1; */
        if (message.signature)
            RecoverableEcdsaSignature.internalBinaryWrite(message.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.SignedPublicKey signed_legacy_create_identity_key = 2; */
        if (message.signedLegacyCreateIdentityKey)
            SignedPublicKey.internalBinaryWrite(message.signedLegacyCreateIdentityKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.LegacyCreateIdentityAssociation
 */
export const LegacyCreateIdentityAssociation = new LegacyCreateIdentityAssociation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecoverableEcdsaSignature$Type extends MessageType<RecoverableEcdsaSignature> {
    constructor() {
        super("xmtp.mls.message_contents.RecoverableEcdsaSignature", [
            { no: 1, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RecoverableEcdsaSignature>): RecoverableEcdsaSignature {
        const message = { bytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RecoverableEcdsaSignature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecoverableEcdsaSignature): RecoverableEcdsaSignature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes bytes */ 1:
                    message.bytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecoverableEcdsaSignature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes bytes = 1; */
        if (message.bytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.RecoverableEcdsaSignature
 */
export const RecoverableEcdsaSignature = new RecoverableEcdsaSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EdDsaSignature$Type extends MessageType<EdDsaSignature> {
    constructor() {
        super("xmtp.mls.message_contents.EdDsaSignature", [
            { no: 1, name: "bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<EdDsaSignature>): EdDsaSignature {
        const message = { bytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EdDsaSignature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EdDsaSignature): EdDsaSignature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes bytes */ 1:
                    message.bytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EdDsaSignature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes bytes = 1; */
        if (message.bytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.EdDsaSignature
 */
export const EdDsaSignature = new EdDsaSignature$Type();
