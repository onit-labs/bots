// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/composite.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { EncodedContent } from "./content";
/**
 * Composite is used to implement xmtp.org/composite content type
 *
 * @generated from protobuf message xmtp.message_contents.Composite
 */
export interface Composite {
    /**
     * @generated from protobuf field: repeated xmtp.message_contents.Composite.Part parts = 1;
     */
    parts: Composite_Part[];
}
/**
 * Part represents one section of a composite message
 *
 * @generated from protobuf message xmtp.message_contents.Composite.Part
 */
export interface Composite_Part {
    /**
     * @generated from protobuf oneof: element
     */
    element: {
        oneofKind: "part";
        /**
         * @generated from protobuf field: xmtp.message_contents.EncodedContent part = 1;
         */
        part: EncodedContent;
    } | {
        oneofKind: "composite";
        /**
         * @generated from protobuf field: xmtp.message_contents.Composite composite = 2;
         */
        composite: Composite;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Composite$Type extends MessageType<Composite> {
    constructor() {
        super("xmtp.message_contents.Composite", [
            { no: 1, name: "parts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Composite_Part }
        ]);
    }
    create(value?: PartialMessage<Composite>): Composite {
        const message = { parts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Composite>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Composite): Composite {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated xmtp.message_contents.Composite.Part parts */ 1:
                    message.parts.push(Composite_Part.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Composite, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated xmtp.message_contents.Composite.Part parts = 1; */
        for (let i = 0; i < message.parts.length; i++)
            Composite_Part.internalBinaryWrite(message.parts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Composite
 */
export const Composite = new Composite$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Composite_Part$Type extends MessageType<Composite_Part> {
    constructor() {
        super("xmtp.message_contents.Composite.Part", [
            { no: 1, name: "part", kind: "message", oneof: "element", T: () => EncodedContent },
            { no: 2, name: "composite", kind: "message", oneof: "element", T: () => Composite }
        ]);
    }
    create(value?: PartialMessage<Composite_Part>): Composite_Part {
        const message = { element: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Composite_Part>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Composite_Part): Composite_Part {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.EncodedContent part */ 1:
                    message.element = {
                        oneofKind: "part",
                        part: EncodedContent.internalBinaryRead(reader, reader.uint32(), options, (message.element as any).part)
                    };
                    break;
                case /* xmtp.message_contents.Composite composite */ 2:
                    message.element = {
                        oneofKind: "composite",
                        composite: Composite.internalBinaryRead(reader, reader.uint32(), options, (message.element as any).composite)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Composite_Part, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.EncodedContent part = 1; */
        if (message.element.oneofKind === "part")
            EncodedContent.internalBinaryWrite(message.element.part, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.Composite composite = 2; */
        if (message.element.oneofKind === "composite")
            Composite.internalBinaryWrite(message.element.composite, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.Composite.Part
 */
export const Composite_Part = new Composite_Part$Type();
