// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "mls/message_contents/group_metadata.proto" (package "xmtp.mls.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Parent message for group metadata
 *
 * @generated from protobuf message xmtp.mls.message_contents.GroupMetadataV1
 */
export interface GroupMetadataV1 {
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.ConversationType conversation_type = 1;
     */
    conversationType: ConversationType;
    /**
     * @generated from protobuf field: string creator_account_address = 2;
     */
    creatorAccountAddress: string;
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.PolicySet policies = 3;
     */
    policies?: PolicySet;
}
/**
 * The set of policies that govern the group
 *
 * @generated from protobuf message xmtp.mls.message_contents.PolicySet
 */
export interface PolicySet {
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.MembershipPolicy add_member_policy = 1;
     */
    addMemberPolicy?: MembershipPolicy;
    /**
     * @generated from protobuf field: xmtp.mls.message_contents.MembershipPolicy remove_member_policy = 2;
     */
    removeMemberPolicy?: MembershipPolicy;
}
/**
 * A policy that governs adding/removing members or installations
 *
 * @generated from protobuf message xmtp.mls.message_contents.MembershipPolicy
 */
export interface MembershipPolicy {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "base";
        /**
         * @generated from protobuf field: xmtp.mls.message_contents.MembershipPolicy.BasePolicy base = 1;
         */
        base: MembershipPolicy_BasePolicy;
    } | {
        oneofKind: "andCondition";
        /**
         * @generated from protobuf field: xmtp.mls.message_contents.MembershipPolicy.AndCondition and_condition = 2;
         */
        andCondition: MembershipPolicy_AndCondition;
    } | {
        oneofKind: "anyCondition";
        /**
         * @generated from protobuf field: xmtp.mls.message_contents.MembershipPolicy.AnyCondition any_condition = 3;
         */
        anyCondition: MembershipPolicy_AnyCondition;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Combine multiple policies. All must evaluate to true
 *
 * @generated from protobuf message xmtp.mls.message_contents.MembershipPolicy.AndCondition
 */
export interface MembershipPolicy_AndCondition {
    /**
     * @generated from protobuf field: repeated xmtp.mls.message_contents.MembershipPolicy policies = 1;
     */
    policies: MembershipPolicy[];
}
/**
 * Combine multiple policies. Any must evaluate to true
 *
 * @generated from protobuf message xmtp.mls.message_contents.MembershipPolicy.AnyCondition
 */
export interface MembershipPolicy_AnyCondition {
    /**
     * @generated from protobuf field: repeated xmtp.mls.message_contents.MembershipPolicy policies = 1;
     */
    policies: MembershipPolicy[];
}
/**
 * Base policy
 *
 * @generated from protobuf enum xmtp.mls.message_contents.MembershipPolicy.BasePolicy
 */
export enum MembershipPolicy_BasePolicy {
    /**
     * @generated from protobuf enum value: BASE_POLICY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: BASE_POLICY_ALLOW = 1;
     */
    ALLOW = 1,
    /**
     * @generated from protobuf enum value: BASE_POLICY_DENY = 2;
     */
    DENY = 2,
    /**
     * @generated from protobuf enum value: BASE_POLICY_ALLOW_IF_ACTOR_CREATOR = 3;
     */
    ALLOW_IF_ACTOR_CREATOR = 3
}
/**
 * Defines the type of conversation
 *
 * @generated from protobuf enum xmtp.mls.message_contents.ConversationType
 */
export enum ConversationType {
    /**
     * @generated from protobuf enum value: CONVERSATION_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CONVERSATION_TYPE_GROUP = 1;
     */
    GROUP = 1,
    /**
     * @generated from protobuf enum value: CONVERSATION_TYPE_DM = 2;
     */
    DM = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GroupMetadataV1$Type extends MessageType<GroupMetadataV1> {
    constructor() {
        super("xmtp.mls.message_contents.GroupMetadataV1", [
            { no: 1, name: "conversation_type", kind: "enum", T: () => ["xmtp.mls.message_contents.ConversationType", ConversationType, "CONVERSATION_TYPE_"] },
            { no: 2, name: "creator_account_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "policies", kind: "message", T: () => PolicySet }
        ]);
    }
    create(value?: PartialMessage<GroupMetadataV1>): GroupMetadataV1 {
        const message = { conversationType: 0, creatorAccountAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupMetadataV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMetadataV1): GroupMetadataV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.mls.message_contents.ConversationType conversation_type */ 1:
                    message.conversationType = reader.int32();
                    break;
                case /* string creator_account_address */ 2:
                    message.creatorAccountAddress = reader.string();
                    break;
                case /* xmtp.mls.message_contents.PolicySet policies */ 3:
                    message.policies = PolicySet.internalBinaryRead(reader, reader.uint32(), options, message.policies);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMetadataV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.mls.message_contents.ConversationType conversation_type = 1; */
        if (message.conversationType !== 0)
            writer.tag(1, WireType.Varint).int32(message.conversationType);
        /* string creator_account_address = 2; */
        if (message.creatorAccountAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.creatorAccountAddress);
        /* xmtp.mls.message_contents.PolicySet policies = 3; */
        if (message.policies)
            PolicySet.internalBinaryWrite(message.policies, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.GroupMetadataV1
 */
export const GroupMetadataV1 = new GroupMetadataV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolicySet$Type extends MessageType<PolicySet> {
    constructor() {
        super("xmtp.mls.message_contents.PolicySet", [
            { no: 1, name: "add_member_policy", kind: "message", T: () => MembershipPolicy },
            { no: 2, name: "remove_member_policy", kind: "message", T: () => MembershipPolicy }
        ]);
    }
    create(value?: PartialMessage<PolicySet>): PolicySet {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolicySet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolicySet): PolicySet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.mls.message_contents.MembershipPolicy add_member_policy */ 1:
                    message.addMemberPolicy = MembershipPolicy.internalBinaryRead(reader, reader.uint32(), options, message.addMemberPolicy);
                    break;
                case /* xmtp.mls.message_contents.MembershipPolicy remove_member_policy */ 2:
                    message.removeMemberPolicy = MembershipPolicy.internalBinaryRead(reader, reader.uint32(), options, message.removeMemberPolicy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolicySet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.mls.message_contents.MembershipPolicy add_member_policy = 1; */
        if (message.addMemberPolicy)
            MembershipPolicy.internalBinaryWrite(message.addMemberPolicy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.mls.message_contents.MembershipPolicy remove_member_policy = 2; */
        if (message.removeMemberPolicy)
            MembershipPolicy.internalBinaryWrite(message.removeMemberPolicy, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.PolicySet
 */
export const PolicySet = new PolicySet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MembershipPolicy$Type extends MessageType<MembershipPolicy> {
    constructor() {
        super("xmtp.mls.message_contents.MembershipPolicy", [
            { no: 1, name: "base", kind: "enum", oneof: "kind", T: () => ["xmtp.mls.message_contents.MembershipPolicy.BasePolicy", MembershipPolicy_BasePolicy, "BASE_POLICY_"] },
            { no: 2, name: "and_condition", kind: "message", oneof: "kind", T: () => MembershipPolicy_AndCondition },
            { no: 3, name: "any_condition", kind: "message", oneof: "kind", T: () => MembershipPolicy_AnyCondition }
        ]);
    }
    create(value?: PartialMessage<MembershipPolicy>): MembershipPolicy {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MembershipPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MembershipPolicy): MembershipPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.mls.message_contents.MembershipPolicy.BasePolicy base */ 1:
                    message.kind = {
                        oneofKind: "base",
                        base: reader.int32()
                    };
                    break;
                case /* xmtp.mls.message_contents.MembershipPolicy.AndCondition and_condition */ 2:
                    message.kind = {
                        oneofKind: "andCondition",
                        andCondition: MembershipPolicy_AndCondition.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).andCondition)
                    };
                    break;
                case /* xmtp.mls.message_contents.MembershipPolicy.AnyCondition any_condition */ 3:
                    message.kind = {
                        oneofKind: "anyCondition",
                        anyCondition: MembershipPolicy_AnyCondition.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).anyCondition)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MembershipPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.mls.message_contents.MembershipPolicy.BasePolicy base = 1; */
        if (message.kind.oneofKind === "base")
            writer.tag(1, WireType.Varint).int32(message.kind.base);
        /* xmtp.mls.message_contents.MembershipPolicy.AndCondition and_condition = 2; */
        if (message.kind.oneofKind === "andCondition")
            MembershipPolicy_AndCondition.internalBinaryWrite(message.kind.andCondition, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.mls.message_contents.MembershipPolicy.AnyCondition any_condition = 3; */
        if (message.kind.oneofKind === "anyCondition")
            MembershipPolicy_AnyCondition.internalBinaryWrite(message.kind.anyCondition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.MembershipPolicy
 */
export const MembershipPolicy = new MembershipPolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MembershipPolicy_AndCondition$Type extends MessageType<MembershipPolicy_AndCondition> {
    constructor() {
        super("xmtp.mls.message_contents.MembershipPolicy.AndCondition", [
            { no: 1, name: "policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MembershipPolicy }
        ]);
    }
    create(value?: PartialMessage<MembershipPolicy_AndCondition>): MembershipPolicy_AndCondition {
        const message = { policies: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MembershipPolicy_AndCondition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MembershipPolicy_AndCondition): MembershipPolicy_AndCondition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated xmtp.mls.message_contents.MembershipPolicy policies */ 1:
                    message.policies.push(MembershipPolicy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MembershipPolicy_AndCondition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated xmtp.mls.message_contents.MembershipPolicy policies = 1; */
        for (let i = 0; i < message.policies.length; i++)
            MembershipPolicy.internalBinaryWrite(message.policies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.MembershipPolicy.AndCondition
 */
export const MembershipPolicy_AndCondition = new MembershipPolicy_AndCondition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MembershipPolicy_AnyCondition$Type extends MessageType<MembershipPolicy_AnyCondition> {
    constructor() {
        super("xmtp.mls.message_contents.MembershipPolicy.AnyCondition", [
            { no: 1, name: "policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MembershipPolicy }
        ]);
    }
    create(value?: PartialMessage<MembershipPolicy_AnyCondition>): MembershipPolicy_AnyCondition {
        const message = { policies: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MembershipPolicy_AnyCondition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MembershipPolicy_AnyCondition): MembershipPolicy_AnyCondition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated xmtp.mls.message_contents.MembershipPolicy policies */ 1:
                    message.policies.push(MembershipPolicy.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MembershipPolicy_AnyCondition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated xmtp.mls.message_contents.MembershipPolicy policies = 1; */
        for (let i = 0; i < message.policies.length; i++)
            MembershipPolicy.internalBinaryWrite(message.policies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.mls.message_contents.MembershipPolicy.AnyCondition
 */
export const MembershipPolicy_AnyCondition = new MembershipPolicy_AnyCondition$Type();
