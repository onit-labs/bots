// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "mls/api/v1/mls.proto" (package "xmtp.mls.api.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MlsApi } from "./mls";
import type { WelcomeMessage } from "./mls";
import type { SubscribeWelcomeMessagesRequest } from "./mls";
import type { GroupMessage } from "./mls";
import type { SubscribeGroupMessagesRequest } from "./mls";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { QueryWelcomeMessagesResponse } from "./mls";
import type { QueryWelcomeMessagesRequest } from "./mls";
import type { QueryGroupMessagesResponse } from "./mls";
import type { QueryGroupMessagesRequest } from "./mls";
import type { GetIdentityUpdatesResponse } from "./mls";
import type { GetIdentityUpdatesRequest } from "./mls";
import type { RevokeInstallationRequest } from "./mls";
import type { FetchKeyPackagesResponse } from "./mls";
import type { FetchKeyPackagesRequest } from "./mls";
import type { UploadKeyPackageRequest } from "./mls";
import type { RegisterInstallationResponse } from "./mls";
import type { RegisterInstallationRequest } from "./mls";
import type { SendWelcomeMessagesRequest } from "./mls";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../../../google/protobuf/empty";
import type { SendGroupMessagesRequest } from "./mls";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * RPCs for the new MLS API
 *
 * @generated from protobuf service xmtp.mls.api.v1.MlsApi
 */
export interface IMlsApiClient {
    /**
     * Send a MLS payload, that would be validated before being stored to the
     * network
     *
     * @generated from protobuf rpc: SendGroupMessages(xmtp.mls.api.v1.SendGroupMessagesRequest) returns (google.protobuf.Empty);
     */
    sendGroupMessages(input: SendGroupMessagesRequest, options?: RpcOptions): UnaryCall<SendGroupMessagesRequest, Empty>;
    /**
     * Send a batch of welcome messages
     *
     * @generated from protobuf rpc: SendWelcomeMessages(xmtp.mls.api.v1.SendWelcomeMessagesRequest) returns (google.protobuf.Empty);
     */
    sendWelcomeMessages(input: SendWelcomeMessagesRequest, options?: RpcOptions): UnaryCall<SendWelcomeMessagesRequest, Empty>;
    /**
     * Register a new installation, which would be validated before storage
     *
     * @generated from protobuf rpc: RegisterInstallation(xmtp.mls.api.v1.RegisterInstallationRequest) returns (xmtp.mls.api.v1.RegisterInstallationResponse);
     */
    registerInstallation(input: RegisterInstallationRequest, options?: RpcOptions): UnaryCall<RegisterInstallationRequest, RegisterInstallationResponse>;
    /**
     * Upload a new KeyPackage, which would be validated before storage
     *
     * @generated from protobuf rpc: UploadKeyPackage(xmtp.mls.api.v1.UploadKeyPackageRequest) returns (google.protobuf.Empty);
     */
    uploadKeyPackage(input: UploadKeyPackageRequest, options?: RpcOptions): UnaryCall<UploadKeyPackageRequest, Empty>;
    /**
     * Get one or more Key Packages by installation_id
     *
     * @generated from protobuf rpc: FetchKeyPackages(xmtp.mls.api.v1.FetchKeyPackagesRequest) returns (xmtp.mls.api.v1.FetchKeyPackagesResponse);
     */
    fetchKeyPackages(input: FetchKeyPackagesRequest, options?: RpcOptions): UnaryCall<FetchKeyPackagesRequest, FetchKeyPackagesResponse>;
    /**
     * Would delete all key packages associated with the installation and mark
     * the installation as having been revoked
     *
     * @generated from protobuf rpc: RevokeInstallation(xmtp.mls.api.v1.RevokeInstallationRequest) returns (google.protobuf.Empty);
     */
    revokeInstallation(input: RevokeInstallationRequest, options?: RpcOptions): UnaryCall<RevokeInstallationRequest, Empty>;
    /**
     * Used to check for changes related to members of a group.
     * Would return an array of any new installations associated with the wallet
     * address, and any revocations that have happened.
     *
     * @generated from protobuf rpc: GetIdentityUpdates(xmtp.mls.api.v1.GetIdentityUpdatesRequest) returns (xmtp.mls.api.v1.GetIdentityUpdatesResponse);
     */
    getIdentityUpdates(input: GetIdentityUpdatesRequest, options?: RpcOptions): UnaryCall<GetIdentityUpdatesRequest, GetIdentityUpdatesResponse>;
    /**
     * Query stored group messages
     *
     * @generated from protobuf rpc: QueryGroupMessages(xmtp.mls.api.v1.QueryGroupMessagesRequest) returns (xmtp.mls.api.v1.QueryGroupMessagesResponse);
     */
    queryGroupMessages(input: QueryGroupMessagesRequest, options?: RpcOptions): UnaryCall<QueryGroupMessagesRequest, QueryGroupMessagesResponse>;
    /**
     * Query stored group messages
     *
     * @generated from protobuf rpc: QueryWelcomeMessages(xmtp.mls.api.v1.QueryWelcomeMessagesRequest) returns (xmtp.mls.api.v1.QueryWelcomeMessagesResponse);
     */
    queryWelcomeMessages(input: QueryWelcomeMessagesRequest, options?: RpcOptions): UnaryCall<QueryWelcomeMessagesRequest, QueryWelcomeMessagesResponse>;
    /**
     * Subscribe stream of new group messages
     *
     * @generated from protobuf rpc: SubscribeGroupMessages(xmtp.mls.api.v1.SubscribeGroupMessagesRequest) returns (stream xmtp.mls.api.v1.GroupMessage);
     */
    subscribeGroupMessages(input: SubscribeGroupMessagesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeGroupMessagesRequest, GroupMessage>;
    /**
     * Subscribe stream of new welcome messages
     *
     * @generated from protobuf rpc: SubscribeWelcomeMessages(xmtp.mls.api.v1.SubscribeWelcomeMessagesRequest) returns (stream xmtp.mls.api.v1.WelcomeMessage);
     */
    subscribeWelcomeMessages(input: SubscribeWelcomeMessagesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeWelcomeMessagesRequest, WelcomeMessage>;
}
/**
 * RPCs for the new MLS API
 *
 * @generated from protobuf service xmtp.mls.api.v1.MlsApi
 */
export class MlsApiClient implements IMlsApiClient, ServiceInfo {
    typeName = MlsApi.typeName;
    methods = MlsApi.methods;
    options = MlsApi.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Send a MLS payload, that would be validated before being stored to the
     * network
     *
     * @generated from protobuf rpc: SendGroupMessages(xmtp.mls.api.v1.SendGroupMessagesRequest) returns (google.protobuf.Empty);
     */
    sendGroupMessages(input: SendGroupMessagesRequest, options?: RpcOptions): UnaryCall<SendGroupMessagesRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendGroupMessagesRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Send a batch of welcome messages
     *
     * @generated from protobuf rpc: SendWelcomeMessages(xmtp.mls.api.v1.SendWelcomeMessagesRequest) returns (google.protobuf.Empty);
     */
    sendWelcomeMessages(input: SendWelcomeMessagesRequest, options?: RpcOptions): UnaryCall<SendWelcomeMessagesRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendWelcomeMessagesRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Register a new installation, which would be validated before storage
     *
     * @generated from protobuf rpc: RegisterInstallation(xmtp.mls.api.v1.RegisterInstallationRequest) returns (xmtp.mls.api.v1.RegisterInstallationResponse);
     */
    registerInstallation(input: RegisterInstallationRequest, options?: RpcOptions): UnaryCall<RegisterInstallationRequest, RegisterInstallationResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterInstallationRequest, RegisterInstallationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Upload a new KeyPackage, which would be validated before storage
     *
     * @generated from protobuf rpc: UploadKeyPackage(xmtp.mls.api.v1.UploadKeyPackageRequest) returns (google.protobuf.Empty);
     */
    uploadKeyPackage(input: UploadKeyPackageRequest, options?: RpcOptions): UnaryCall<UploadKeyPackageRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadKeyPackageRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Get one or more Key Packages by installation_id
     *
     * @generated from protobuf rpc: FetchKeyPackages(xmtp.mls.api.v1.FetchKeyPackagesRequest) returns (xmtp.mls.api.v1.FetchKeyPackagesResponse);
     */
    fetchKeyPackages(input: FetchKeyPackagesRequest, options?: RpcOptions): UnaryCall<FetchKeyPackagesRequest, FetchKeyPackagesResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchKeyPackagesRequest, FetchKeyPackagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Would delete all key packages associated with the installation and mark
     * the installation as having been revoked
     *
     * @generated from protobuf rpc: RevokeInstallation(xmtp.mls.api.v1.RevokeInstallationRequest) returns (google.protobuf.Empty);
     */
    revokeInstallation(input: RevokeInstallationRequest, options?: RpcOptions): UnaryCall<RevokeInstallationRequest, Empty> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevokeInstallationRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Used to check for changes related to members of a group.
     * Would return an array of any new installations associated with the wallet
     * address, and any revocations that have happened.
     *
     * @generated from protobuf rpc: GetIdentityUpdates(xmtp.mls.api.v1.GetIdentityUpdatesRequest) returns (xmtp.mls.api.v1.GetIdentityUpdatesResponse);
     */
    getIdentityUpdates(input: GetIdentityUpdatesRequest, options?: RpcOptions): UnaryCall<GetIdentityUpdatesRequest, GetIdentityUpdatesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetIdentityUpdatesRequest, GetIdentityUpdatesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Query stored group messages
     *
     * @generated from protobuf rpc: QueryGroupMessages(xmtp.mls.api.v1.QueryGroupMessagesRequest) returns (xmtp.mls.api.v1.QueryGroupMessagesResponse);
     */
    queryGroupMessages(input: QueryGroupMessagesRequest, options?: RpcOptions): UnaryCall<QueryGroupMessagesRequest, QueryGroupMessagesResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupMessagesRequest, QueryGroupMessagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Query stored group messages
     *
     * @generated from protobuf rpc: QueryWelcomeMessages(xmtp.mls.api.v1.QueryWelcomeMessagesRequest) returns (xmtp.mls.api.v1.QueryWelcomeMessagesResponse);
     */
    queryWelcomeMessages(input: QueryWelcomeMessagesRequest, options?: RpcOptions): UnaryCall<QueryWelcomeMessagesRequest, QueryWelcomeMessagesResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryWelcomeMessagesRequest, QueryWelcomeMessagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe stream of new group messages
     *
     * @generated from protobuf rpc: SubscribeGroupMessages(xmtp.mls.api.v1.SubscribeGroupMessagesRequest) returns (stream xmtp.mls.api.v1.GroupMessage);
     */
    subscribeGroupMessages(input: SubscribeGroupMessagesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeGroupMessagesRequest, GroupMessage> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeGroupMessagesRequest, GroupMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe stream of new welcome messages
     *
     * @generated from protobuf rpc: SubscribeWelcomeMessages(xmtp.mls.api.v1.SubscribeWelcomeMessagesRequest) returns (stream xmtp.mls.api.v1.WelcomeMessage);
     */
    subscribeWelcomeMessages(input: SubscribeWelcomeMessagesRequest, options?: RpcOptions): ServerStreamingCall<SubscribeWelcomeMessagesRequest, WelcomeMessage> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeWelcomeMessagesRequest, WelcomeMessage>("serverStreaming", this._transport, method, opt, input);
    }
}
