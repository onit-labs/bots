// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "message_contents/contact.proto" (package "xmtp.message_contents", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SignedPublicKeyBundle } from "./public_key";
import { PublicKeyBundle } from "./public_key";
/**
 * LEGACY: User key bundle V1 using PublicKeys.
 * The PublicKeys MUST be signed.
 *
 * @generated from protobuf message xmtp.message_contents.ContactBundleV1
 */
export interface ContactBundleV1 {
    /**
     * @generated from protobuf field: xmtp.message_contents.PublicKeyBundle key_bundle = 1;
     */
    keyBundle?: PublicKeyBundle;
}
/**
 * User key bundle V2 using SignedPublicKeys.
 *
 * @generated from protobuf message xmtp.message_contents.ContactBundleV2
 */
export interface ContactBundleV2 {
    /**
     * @generated from protobuf field: xmtp.message_contents.SignedPublicKeyBundle key_bundle = 1;
     */
    keyBundle?: SignedPublicKeyBundle;
}
/**
 * Versioned ContactBundle
 *
 * @generated from protobuf message xmtp.message_contents.ContactBundle
 */
export interface ContactBundle {
    /**
     * @generated from protobuf oneof: version
     */
    version: {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: xmtp.message_contents.ContactBundleV1 v1 = 1;
         */
        v1: ContactBundleV1;
    } | {
        oneofKind: "v2";
        /**
         * @generated from protobuf field: xmtp.message_contents.ContactBundleV2 v2 = 2;
         */
        v2: ContactBundleV2;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ContactBundleV1$Type extends MessageType<ContactBundleV1> {
    constructor() {
        super("xmtp.message_contents.ContactBundleV1", [
            { no: 1, name: "key_bundle", kind: "message", T: () => PublicKeyBundle }
        ]);
    }
    create(value?: PartialMessage<ContactBundleV1>): ContactBundleV1 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContactBundleV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContactBundleV1): ContactBundleV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.PublicKeyBundle key_bundle */ 1:
                    message.keyBundle = PublicKeyBundle.internalBinaryRead(reader, reader.uint32(), options, message.keyBundle);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContactBundleV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.PublicKeyBundle key_bundle = 1; */
        if (message.keyBundle)
            PublicKeyBundle.internalBinaryWrite(message.keyBundle, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.ContactBundleV1
 */
export const ContactBundleV1 = new ContactBundleV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContactBundleV2$Type extends MessageType<ContactBundleV2> {
    constructor() {
        super("xmtp.message_contents.ContactBundleV2", [
            { no: 1, name: "key_bundle", kind: "message", T: () => SignedPublicKeyBundle }
        ]);
    }
    create(value?: PartialMessage<ContactBundleV2>): ContactBundleV2 {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContactBundleV2>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContactBundleV2): ContactBundleV2 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.SignedPublicKeyBundle key_bundle */ 1:
                    message.keyBundle = SignedPublicKeyBundle.internalBinaryRead(reader, reader.uint32(), options, message.keyBundle);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContactBundleV2, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.SignedPublicKeyBundle key_bundle = 1; */
        if (message.keyBundle)
            SignedPublicKeyBundle.internalBinaryWrite(message.keyBundle, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.ContactBundleV2
 */
export const ContactBundleV2 = new ContactBundleV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContactBundle$Type extends MessageType<ContactBundle> {
    constructor() {
        super("xmtp.message_contents.ContactBundle", [
            { no: 1, name: "v1", kind: "message", oneof: "version", T: () => ContactBundleV1 },
            { no: 2, name: "v2", kind: "message", oneof: "version", T: () => ContactBundleV2 }
        ]);
    }
    create(value?: PartialMessage<ContactBundle>): ContactBundle {
        const message = { version: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContactBundle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContactBundle): ContactBundle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xmtp.message_contents.ContactBundleV1 v1 */ 1:
                    message.version = {
                        oneofKind: "v1",
                        v1: ContactBundleV1.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v1)
                    };
                    break;
                case /* xmtp.message_contents.ContactBundleV2 v2 */ 2:
                    message.version = {
                        oneofKind: "v2",
                        v2: ContactBundleV2.internalBinaryRead(reader, reader.uint32(), options, (message.version as any).v2)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContactBundle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xmtp.message_contents.ContactBundleV1 v1 = 1; */
        if (message.version.oneofKind === "v1")
            ContactBundleV1.internalBinaryWrite(message.version.v1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* xmtp.message_contents.ContactBundleV2 v2 = 2; */
        if (message.version.oneofKind === "v2")
            ContactBundleV2.internalBinaryWrite(message.version.v2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xmtp.message_contents.ContactBundle
 */
export const ContactBundle = new ContactBundle$Type();
